input CreateCommentInput {
    plain_text_body: String!
    json_body: Object!
    application_id: String!
    thread_id: String!
}

mutation CreateThreadComent($createCommentInput: CreateCommentInput!) {
    create_comment(CreateCommentInput: $createCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

input UpdateCommentInput {
    plain_text_body: String!
    json_body: Object!
    comment_id: String!
}

mutation EditThreadComment($UpdateCommentInput: UpdateCommentInput!) {
    update_comment(UpdateCommentInput: $UpdateCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation DeleteThreadComment($commentId: String!) {
    delete_comment(commentId: $commentId) {
        success
        message
    }
}

input CreateReplyCommentInput {
    plain_text_body: String!
    json_body: Object!
    application_id: String!
    thread_id: String!
    parent_id: String!
    replied_to_id: String!
}

mutation CreateReplyComment(
    $CreateReplyCommentInput: CreateReplyCommentInput!
) {
    create_reply_comment(CreateReplyCommentInput: $CreateReplyCommentInput) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation UpVoteComment($comment_id: String!) {
    up_vote_comment(comment_id: $comment_id) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

mutation DownVoteComment($comment_id: String!) {
    down_vote_comment(comment_id: $comment_id) {
        ...CommentFragment
        replies {
            ...CommentFragment
            replies {
                ...CommentFragment
            }
        }
    }
}

fragment ThreadFragment on ThreadModel {
    id
    application_id
    title
    website_url
    poll {
        ...PollFragment
    }
    pinned_comment {
        application_id
        author {
            username
            id
        }
        plain_text_body
        json_body
        id
        thread_id
        created_at
        updated_at
        user_id
        parent_id
    }
}

fragment PollFragment on PollEntity {
    id
    title
    created_at
    updated_at
    closed
    voted
    options {
        id
        option
        votes {
            id
            user_id
        }
    }
}

input FindOrCreateOneThreadInput {
    application_id: String!
    title: String!
    website_url: String!
}

input FetchThreadCommentsById {
    skip: Int!
    limit: Int!
}

query FindOneOrCreateOneThread(
    $findOrCreateOneThreadInput: FindOrCreateOneThreadInput!
) {
    find_one_thread_or_create_one(
        findOrCreateOneThreadInput: $findOrCreateOneThreadInput
    ) {
        ...ThreadFragment
    }
}

input DeleteManyCommentsInput {
    comment_ids: String
    permanent_delete: Boolean!
}

mutation DeleteManyComments(
    $deleteManyCommentsInput: DeleteManyCommentsInput!
) {
    delete_many_comments(deleteManyCommentsInput: $deleteManyCommentsInput) {
        success
        message
    }
}

input CreateReportInput {
    comment_id: String!
    report: REPORT_REASON!
}

mutation CreateCommentReport($createReportInput: CreateReportInput!) {
    create_report(createReportInput: $createReportInput) {
        success
        message
    }
}
